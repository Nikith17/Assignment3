AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPCName:
    Type: String
    Default: "CustomVPC-Donthi"
  SubnetCIDRPublic:
    Type: String
    Default: '10.0.1.0/24'
  SubnetCIDRPrivate:
    Type: String
    Default: '10.0.2.0/24'
  InstanceType:
    Type: String
    Default: t3.micro

Resources:
  # Create a Custom VPC
  DonthiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Create Public Subnet
  DonthiPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DonthiVPC
      CidrBlock: !Ref SubnetCIDRPublic
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public-Subnet-Donthi"

  # Create Private Subnet
  DonthiPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DonthiVPC
      CidrBlock: !Ref SubnetCIDRPrivate
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: "Private-Subnet-Donthi"

  # Create Internet Gateway
  DonthiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "Internet-Gateway-Donthi"

  # Attach Internet Gateway to the VPC
  DonthiAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DonthiVPC
      InternetGatewayId: !Ref DonthiInternetGateway

  # Create a Security Group for ECS Tasks
  DonthiECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP/HTTPS traffic for ECS tasks"
      VpcId: !Ref DonthiVPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'

  # Create Application Load Balancer (ALB)
  DonthiALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "DonthiALB"
      Subnets:
        - Ref: DonthiPublicSubnet
      SecurityGroups:
        - Ref: DonthiECSSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: "DonthiALB"

  # Create Target Group for ECS Tasks
  DonthiALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "DonthiALBTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref DonthiVPC
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  # Create ECS Cluster
  DonthiECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "DonthiECSCluster"

  # ECS Task Definition
  DonthiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "DonthiTaskDefinition"
      ExecutionRoleArn: arn:aws:iam::897729119415:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: "DonthiAppContainer"
          Image: "897729119415.dkr.ecr.us-east-1.amazonaws.com/donthiapp:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  # ECS Service
  DonthiECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref DonthiECSCluster
      TaskDefinition: !Ref DonthiTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Ref: DonthiPrivateSubnet
          SecurityGroups:
            - Ref: DonthiECSSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !Ref DonthiALBTargetGroup
          ContainerName: "DonthiAppContainer"
          ContainerPort: 80

  # Create Auto Scaling for ECS Service
  DonthiServiceAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub "service/${DonthiECSCluster}/${DonthiECSService}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      PolicyName: "DonthiScalingPolicy"
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

Outputs:
  LoadBalancerDNSName:
    Description: "The DNS name of the Application Load Balancer"
    Value: !GetAtt DonthiALB.DNSName
